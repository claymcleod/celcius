#! /usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright Â© 2016 Clay L. McLeod <clay.l.mcleod@gmail.com>
#
# Distributed under terms of the MIT license.

from __future__ import print_function

import os, sys, random, string
import argparse

from celcius import tasks
from celcius.utils import terminal_utils, file_utils
from celcius.unix.commands.crontab import crontab

parser = argparse.ArgumentParser(description="Utility for scheduling celcius data pipelining tasks")
parser.add_argument("task", help="The task to schedule. Possible arguments: ['append-file', 'replicate-file']")
parser.add_argument("-n", "--jobid", default=''.join(random.choice(string.digits) for _ in range(5)), help="Unique job name (if you do not provide one, one will be generated)")
parser.add_argument("-r", "--remoteurl", default=None, help="For commands that need a remote url operand")
parser.add_argument("-f", "--localfile", default=None, help="For commands that need a local file operand")
args = parser.parse_args()

if file_utils.get_celcius_config() == None:
    print("You must first run celcius-init")
    sys.exit(1)

if args.task == "append-file":
    if args.remoteurl == None or args.localfile == None:
        print("append-file task requires --remoteurl and --localfile")
        sys.exit(1)

    cmd = tasks.build_append_file_task(args.remoteurl, args.localfile)
    cron_cmd = crontab(cmd, jobid=args.jobid)
    cron_cmd_str = cron_cmd.build_command()

    if terminal_utils.confirm_command(cron_cmd_str):
        os.system(cron_cmd_str)
elif args.task == "replicate-file":
    if args.remoteurl == None or args.localfile == None:
        print("replicate-file task requires --remoteurl and --localfile")
        sys.exit(1)

    cmd = tasks.build_replicate_file_task(args.remoteurl, args.localfile)
    cron_cmd = crontab(cmd, jobid=args.jobid)
    cron_cmd_str = cron_cmd.build_command()

    if terminal_utils.confirm_command(cron_cmd_str):
        os.system(cron_cmd_str)
else:
    print("Unknown task: {}".format(args.task))
    sys.exit(1)
